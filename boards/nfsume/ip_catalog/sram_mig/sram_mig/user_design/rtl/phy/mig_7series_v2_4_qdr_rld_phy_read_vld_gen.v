//*****************************************************************************
//(c) Copyright 2009 - 2013 Xilinx, Inc. All rights reserved.
//
// This file contains confidential and proprietary information
// of Xilinx, Inc. and is protected under U.S. and
// international copyright and other intellectual property
// laws.
//
// DISCLAIMER
// This disclaimer is not a license and does not grant any
// rights to the materials distributed herewith. Except as
// otherwise provided in a valid license issued to you by
// Xilinx, and to the maximum extent permitted by applicable
// law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
// WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
// AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
// BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
// INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
// (2) Xilinx shall not be liable (whether in contract or tort,
// including negligence, or under any other theory of
// liability) for any loss or damage of any kind or nature
// related to, arising under or in connection with these
// materials, including for any direct, or any indirect,
// special, incidental, or consequential loss or damage
// (including loss of data, profits, goodwill, or any type of
// loss or damage suffered as a result of any action brought
// by a third party) even if such damage or loss was
// reasonably foreseeable or Xilinx had been advised of the
// possibility of the same.
//
// CRITICAL APPLICATIONS
// Xilinx products are not designed or intended to be fail-
// safe, or for use in any application requiring fail-safe
// performance, such as life-support or safety devices or
// systems, Class III medical devices, nuclear facilities,
// applications related to the deployment of airbags, or any
// other applications that could lead to death, personal
// injury, or severe property or environmental damage
// (individually and collectively, "Critical
// Applications"). Customer assumes the sole risk and
// liability of any use of Xilinx products in Critical
// Applications, subject only to applicable laws and
// regulations governing limitations on product liability.
//
// THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
// PART OF THIS FILE AT ALL TIMES.

////////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor             : Xilinx
// \   \   \/     Version            : %version 
//  \   \         Application        : MIG
//  /   /         Filename           : qdr_rld_phy_read_vld_gen.v
// /___/   /\     Date Last Modified : $date$
// \   \  /  \    Date Created       : Nov 19, 2008 
//  \___\/\___\
//
//Device: 7 Series
//Design: QDRII+ SRAM / RLDRAM II SDRAM
//
//Purpose:
//  This module
//  1. Generates the valid signals for the read data sent to the user interface.
//  2. The valids are generated by delaying the incoming read commands from the
//     write path by some amount determined by the latency calibration.
//
//Revision History:
//
////////////////////////////////////////////////////////////////////////////////

`timescale 1ps/1ps

module mig_7series_v2_4_qdr_rld_phy_read_vld_gen #
(
  parameter BURST_LEN   = 4,  // 4 = Burst Length 4, 2 = Burst Length 2
  parameter nCK_PER_CLK = 2,
  parameter TCQ         = 100 // Register delay
)
(
  // System Signals
  input       clk,            // main system half freq clk
  input       rst_clk,        // reset syncrhonized to clk

  input  kill_rd_valid,

  // Write Interface
  input [nCK_PER_CLK-1:0]   int_rd_cmd_n,   // read command(s) - only bit 0 is used for BL4

  // Stage 2 Calibration Interface
  input [4:0] valid_latency,  // amount to delay read command
  input       cal_done,       // indicates calibration is complete

  // User Interface
  output reg [nCK_PER_CLK-1:0] data_valid,    // data valid for read data
  
  // ChipScope Debug Signals
  output [4:0] dbg_valid_lat
);

  wire [nCK_PER_CLK-1:0] data_valid_int;
  reg  [nCK_PER_CLK-1:0] data_valid_int_r1;
  reg  [nCK_PER_CLK-1:0] data_valid_int_r2;
  
  //Read Data valid depends on BL as well as what slot a command is placed in.
  //The latency is computed based on a single command placed in slot0. If a read
  //command comes into another slot we have to adjust accordingly.
  // nCK_PER_CLK == 2
  //   BL2: 
  //      Slot 0: Slot 0 valid
  //      Slot 1: Slot 1 valid
  //   BL4: 
  //      Slot 0, Slot 0/1 valid
  //      Slot 1, Slot 1 valid, Slot 0 (reg) valid
  //   BL8: 
  //      Slot 0, Slot 0/1 valid, Slot 0/1 (reg) valid
  //      Slot 1, Slot 1 valid, Slot 0/1 (reg) valid, Slot 0 (reg2) valid
  // nCK_PER_CLK == 4
  //   BL2: 
  //      Slot 0: Slot 0 valid
  //      Slot 1: Slot 1 valid
  //      Slot 2: Slot 2 valid
  //      Slot 3: Slot 3 valid
  //   BL4: 
  //      Slot 0, Slot 0/1 valid
  //      Slot 1, Slot 1/2 valid
  //      Slot 2: Slot 2/3 valid
  //      Slot 3: Slot 3 valid, Slot 0 (reg) valid
  //   BL8: 
  //      Slot 0, Slot 0/1/2/3 valid
  //      Slot 1, Slot 1/2/3 valid, Slot 0 (reg) valid
  //      Slot 2, Slot 2/3 valid, Slot 0/1 (reg) valid
  //      Slot 3, Slot 3 valid, Slot 0/1/2 (reg) valid
  generate
  genvar i;
    for (i=0; i < nCK_PER_CLK; i = i+1) begin : gen_rd_valid
      // Delay the incoming rd_cmd by valid_latency number of cycles in order to
      // generate the data valid for read data
        SRLC32E u_vld_gen_srl_inst (
        .Q    (data_valid_int[i]),
        .Q31  ( ),
        .A    (valid_latency),
        .CE   (1'b1),
        .CLK  (clk),
        .D    (~int_rd_cmd_n[i])
      );

      always @(posedge clk)
      begin
        data_valid_int_r1[i] <=#TCQ data_valid_int[i];
        data_valid_int_r2[i] <=#TCQ data_valid_int_r1[i];
      end

      if (nCK_PER_CLK == 2) begin : gen_data_valid_2
        // Only issue valids after calibration has completed
        always @(posedge clk) begin
          if (rst_clk || !cal_done || kill_rd_valid) begin
            data_valid[i] <= #TCQ 0;
          end else begin 
            if (BURST_LEN==2) begin
              data_valid[i] <= #TCQ data_valid_int[i];
            end else if (BURST_LEN==4) begin
              if (i==0)
                data_valid[0] <= #TCQ data_valid_int[0] | data_valid_int_r1[1];
              else 
                data_valid[1] <= #TCQ data_valid_int[0] | data_valid_int[1] ;

            end else begin //BURST_LEN==8
              if (i==0)
                data_valid[0] <= #TCQ data_valid_int[0] | data_valid_int_r1[0] | 
                                      data_valid_int_r1[1] | data_valid_int_r2[1];
              else 
                data_valid[1] <= #TCQ data_valid_int[0] | data_valid_int_r1[0] | 
                                      data_valid_int[1] | data_valid_int_r1[1];
            end
          end
        end //end of always
 
      end else if (nCK_PER_CLK == 4) begin : gen_data_valid_4
        // Only issue valids after calibration has completed
        always @(posedge clk) begin
          if (rst_clk || !cal_done || kill_rd_valid) begin
            data_valid[i] <= #TCQ 0;
          end else begin 
            if (BURST_LEN==2) begin
              data_valid[i] <= #TCQ data_valid_int[i];
            end else if (BURST_LEN==4) begin
              if (i==0)
                data_valid[0] <= #TCQ data_valid_int[0] | data_valid_int_r1[3];
              else if (i==1)
                data_valid[1] <= #TCQ data_valid_int[0] | data_valid_int[1] ;
              else if (i==2)
                data_valid[2] <= #TCQ data_valid_int[1] | data_valid_int[2] ;
              else //i==3
                data_valid[3] <= #TCQ data_valid_int[2] | data_valid_int[3] ; 
            end else begin //BURST_LEN==8
              if (i==0)
                data_valid[0] <= #TCQ data_valid_int[0] | data_valid_int_r1[1] | 
                                      data_valid_int_r1[2] | data_valid_int_r1[3];
              else if (i==1)
                data_valid[1] <= #TCQ data_valid_int[0] | data_valid_int[1] | 
                                      data_valid_int_r1[2] | data_valid_int_r1[3];
              else if (i==2)
                data_valid[2] <= #TCQ data_valid_int[0] | data_valid_int[1] | 
                                      data_valid_int[2] | data_valid_int_r1[3];
              else //i==3
                data_valid[3] <= #TCQ data_valid_int[0] | data_valid_int[1] | 
                                          data_valid_int[2] | data_valid_int[3];
            end
          end 
        end //end of always
      end //end of gen_data_valid_4
    end //end of for
  endgenerate

  // Assign debug signals
  assign dbg_valid_lat = valid_latency;

endmodule
